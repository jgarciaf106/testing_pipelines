name: Databricks App Pipeline

on:
  push:
    branches: ["main"]

jobs:
  get-deployed-app:
    name: Get deployed app
    runs-on: ubuntu-latest
    outputs:
      push-dir: ${{ steps.validate_changes.outputs.push_dir }}
      valid-changes: ${{ steps.validate_changes.outputs.valid_changes }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Fetch all history to properly check differences
          
      - name: Validate changes
        id: validate_changes
        run: |
          # Get changed folders and filter out root files and dot folders
          VALID_FOLDERS=$(git diff-tree --no-commit-id --name-only -r HEAD | 
                          grep -v "^[^/]*$" |  # Remove files in root directory
                          awk -F'/' '{print $1}' | 
                          grep -v "^\." |       # Remove dot folders like .github
                          sort | uniq)
          
          # Check if there are any valid folders
          if [ -z "$VALID_FOLDERS" ]; then
            echo "No valid folder changes detected, stopping pipeline (successfully)"
            echo "valid_changes=false" >> $GITHUB_OUTPUT
            echo "push_dir=" >> $GITHUB_OUTPUT
            # Success message for logs
            echo "::notice::Pipeline stopped successfully - no valid folder changes detected"
          else
            echo "Valid folder changes detected: $VALID_FOLDERS"
            echo "valid_changes=true" >> $GITHUB_OUTPUT
            echo "push_dir=${VALID_FOLDERS}" >> $GITHUB_OUTPUT
          fi

  check-continue:
    name: Check if pipeline should continue
    needs: get-deployed-app
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Check valid changes
        run: |
          if [ "${{ needs.get-deployed-app.outputs.valid-changes }}" != "true" ]; then
            echo "No valid folder changes, stopping pipeline successfully"
            exit 0
          else
            echo "Valid changes detected, continuing pipeline"
          fi
          
  deploy:
    name: Make App Distribution
    runs-on: ubuntu-latest
    needs: [get-deployed-app, check-continue]
    if: needs.get-deployed-app.outputs.valid-changes == 'true'
    environment: databricks
    defaults:
      run:
        working-directory: ${{ needs.get-deployed-app.outputs.push-dir }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup databricks CLI
        uses: databricks/setup-cli@main
        
      - name: test
        run: |
          echo "Deploying to folder: ${{ needs.get-deployed-app.outputs.push-dir }}"
